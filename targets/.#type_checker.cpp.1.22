#include <string>
#include "targets/type_checker.h"
#include "targets/symbol.h"
#include "ast/all.h"  // automatically generated
#include <cdk/types/basic_type.h>
#include <cdk/types/reference_type.h>

#define ASSERT_UNSPEC { if (node->type() != nullptr && !node->is_typed(cdk::TYPE_UNSPEC)) return; }

//---------------------------------------------------------------------------

void og::type_checker::do_sequence_node(cdk::sequence_node *const node, int lvl) {
  for (size_t i = 0; i<node->size(); i++) node->node(i)->accept(this,lvl);
}

//---------------------------------------------------------------------------

void og::type_checker::do_nil_node(cdk::nil_node *const node, int lvl) {
  // EMPTY
}
void og::type_checker::do_data_node(cdk::data_node *const node, int lvl) {
  // EMPTY
}
void og::type_checker::do_double_node(cdk::double_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(cdk::make_primitive_type(8, cdk::TYPE_DOUBLE));
}
void og::type_checker::do_not_node(cdk::not_node *const node, int lvl) {
   ASSERT_UNSPEC;
   node->argument()->accept(this, lvl + 2);
   if ( node->argument()->is_typed(cdk::TYPE_INT))
        node->type(cdk::make_primitive_type(4,cdk::TYPE_INT));
   else
        throw std::string("wrong type for unary not operation.");
}

void og::type_checker::do_and_node(cdk::and_node *const node, int lvl) {
   processBinaryIExpression(node,lvl);
}

void og::type_checker::do_or_node(cdk::or_node *const node, int lvl) {
  processBinaryIExpression(node,lvl);
}

//---------------------------------------------------------------------------

void og::type_checker::do_integer_node(cdk::integer_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));
}

void og::type_checker::do_string_node(cdk::string_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(cdk::make_primitive_type(4, cdk::TYPE_STRING));
}

//---------------------------------------------------------------------------

void og::type_checker::processUnaryExpression(cdk::unary_operation_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->argument()->accept(this, lvl + 2);
  if (!node->argument()->is_typed(cdk::TYPE_INT)) throw std::string("wrong type in argument of unary expression");

  node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));
}

void og::type_checker::do_neg_node(cdk::neg_node *const node, int lvl) {
  processUnaryExpression(node, lvl);
}

//---------------------------------------------------------------------------


void og::type_checker::processBinaryPIDExpression(cdk::binary_operation_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->left()->accept(this, lvl + 2);
  node->right()->accept(this, lvl + 2);

  if (node->left()->is_typed(cdk::TYPE_DOUBLE) && node->right()->is_typed(cdk::TYPE_DOUBLE)) {
    node->type(make_primitive_type(8,cdk::TYPE_DOUBLE));
  }
  else if (node->left()->is_typed(cdk::TYPE_DOUBLE) && node->right()->is_typed(cdk::TYPE_INT)) {
      node->type(make_primitive_type(8,cdk::TYPE_DOUBLE));
  }
  else if (node->left()->is_typed(cdk::TYPE_INT) && node->right()->is_typed(cdk::TYPE_DOUBLE)) {
      node->type(make_primitive_type(8,cdk::TYPE_DOUBLE));
  }
  else if (node->left()->is_typed(cdk::TYPE_POINTER) && node->right()->is_typed(cdk::TYPE_INT)) {
      node->type(make_primitive_type(4,cdk::TYPE_POINTER));
  }
  else if (node->left()->is_typed(cdk::TYPE_INT) && node->right()->is_typed(cdk::TYPE_POINTER)) {
      node->type(make_primitive_type(4,cdk::TYPE_POINTER));
  }
  else if (node->left()->is_typed(cdk::TYPE_INT) && node->right()->is_typed(cdk::TYPE_INT)) {
      node->type(make_primitive_type(4,cdk::TYPE_INT));
  }
  else
    throw std::string("wrong types in binary operation");
}

void og::type_checker::processBinaryIDExpression(cdk::binary_operation_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->left()->accept(this, lvl + 2);
  node->right()->accept(this, lvl + 2);

  if (node->left()->is_typed(cdk::TYPE_DOUBLE) && node->right()->is_typed(cdk::TYPE_DOUBLE)) {
    node->type(make_primitive_type(8,cdk::TYPE_DOUBLE));
  }
  else if (node->left()->is_typed(cdk::TYPE_DOUBLE) && node->right()->is_typed(cdk::TYPE_INT)) {
      node->type(make_primitive_type(8,cdk::TYPE_DOUBLE));
  }
  else if (node->left()->is_typed(cdk::TYPE_INT) && node->right()->is_typed(cdk::TYPE_DOUBLE)) {
      node->type(make_primitive_type(8,cdk::TYPE_DOUBLE));
  }
  else if (node->left()->is_typed(cdk::TYPE_INT) && node->right()->is_typed(cdk::TYPE_INT)) {
      node->type(make_primitive_type(4,cdk::TYPE_INT));
  }
  else
    throw std::string("wrong types in binary operation");
}

void og::type_checker::processBinaryIExpression(cdk::binary_operation_node *const node, int lvl) {
    ASSERT_UNSPEC;
    node->left()->accept(this, lvl + 2);
    if (!node->left()->is_typed(cdk::TYPE_INT)) throw std::string("integer expression expected in left argument of binary expression");

    node->right()->accept(this, lvl + 2);
    if (!node->right()->is_typed(cdk::TYPE_INT)) throw std::string("integer expression expected in right argument of binary expression");

    node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));
}

void og::type_checker::do_add_node(cdk::add_node *const node, int lvl) {
  processBinaryPIDExpression(node, lvl);
}
void og::type_checker::do_sub_node(cdk::sub_node *const node, int lvl) {
  processBinaryPIDExpression(node, lvl);
}
void og::type_checker::do_mul_node(cdk::mul_node *const node, int lvl) {
  processBinaryIDExpression(node, lvl);
}
void og::type_checker::do_div_node(cdk::div_node *const node, int lvl) {
  processBinaryPIDExpression(node, lvl);
}
void og::type_checker::do_mod_node(cdk::mod_node *const node, int lvl) {
  processBinaryIExpression(node, lvl);
}
void og::type_checker::do_lt_node(cdk::lt_node *const node, int lvl) {
  processBinaryIExpression(node, lvl);
}
void og::type_checker::do_le_node(cdk::le_node *const node, int lvl) {
  processBinaryIExpression(node, lvl);
}
void og::type_checker::do_ge_node(cdk::ge_node *const node, int lvl) {
  processBinaryIExpression(node, lvl);
}
void og::type_checker::do_gt_node(cdk::gt_node *const node, int lvl) {
  processBinaryIExpression(node, lvl);
}
void og::type_checker::do_ne_node(cdk::ne_node *const node, int lvl) {
  processBinaryIExpression(node, lvl);
}
void og::type_checker::do_eq_node(cdk::eq_node *const node, int lvl) {
  processBinaryIExpression(node, lvl);
}

//---------------------------------------------------------------------------

void og::type_checker::do_variable_node(cdk::variable_node *const node, int lvl) {
  ASSERT_UNSPEC;
  const std::string &id = node->name();
  std::shared_ptr<og::symbol> symbol = _symtab.find(id);

  if (symbol != nullptr) {
    node->type(symbol->type());
  } else {
    throw id;
  }
}

void og::type_checker::do_rvalue_node(cdk::rvalue_node *const node, int lvl) {
  ASSERT_UNSPEC;
  try {
    node->lvalue()->accept(this, lvl);
    node->type(node->lvalue()->type());
  } catch (const std::string &id) {
    throw "undeclared variable '" + id + "'";
  }
}

void og::type_checker::do_assignment_node(cdk::assignment_node *const node, int lvl) {
  ASSERT_UNSPEC;
  

  try {
    node->lvalue()->accept(this, lvl + 2);
  } catch (const std::string &id) {
    throw "undeclared variable '" + id + "'";
  }
  node->rvalue()->accept(this, lvl + 2);

  if (node->lvalue()->is_typed(cdk::TYPE_INT)) {
    if(node->rvalue()->is_typed(cdk::TYPE_INT)) {
        node->type(make_primitive_type(4,cdk::TYPE_INT));
    } else if(node->rvalue()->is_typed(cdk::TYPE_UNSPEC)){
        node->type(make_primitive_type(4,cdk::TYPE_INT));
        node->rvalue()->type(make_primitive_type(4,cdk::TYPE_INT));
    }
    else throw std::string("wrong assigment to integer.");
  } else if(node->lvalue()->is_typed(cdk::TYPE_DOUBLE)){
    if(node->rvalue()->is_typed(cdk::TYPE_INT) || node->rvalue()->is_typed(cdk::TYPE_DOUBLE)) {
        node->type(make_primitive_type(4,cdk::TYPE_DOUBLE));
    } else if(node->rvalue()->is_typed(cdk::TYPE_UNSPEC)){
        node->type(make_primitive_type(4,cdk::TYPE_DOUBLE));
        node->rvalue()->type(make_primitive_type(4,cdk::TYPE_DOUBLE));
    } 
    else throw std::string("wrong assigment to double.");
  } else if(node->lvalue()->is_typed(cdk::TYPE_STRING)) {
    if(node->rvalue()->is_typed(cdk::TYPE_STRING)) {
        node->type(make_primitive_type(4,cdk::TYPE_STRING));
    } else if(node->rvalue()->is_typed(cdk::TYPE_UNSPEC)){
        throw std::string("wrong assigment to string.");
    } 
    else throw std::string("wrong assigment to string.");
  } else if(node->lvalue()->is_typed(cdk::TYPE_POINTER)) {
    if(node->rvalue()->is_typed(cdk::TYPE_POINTER)) {
        checkPointersTypes(cdk::reference_type_cast(node->lvalue()->type()),cdk::reference_type_cast(node->rvalue()->type()));
        node->type(make_reference_type(4,cdk::reference_type_cast(node->lvalue()->type())->referenced()));
    } else throw std::string("wrong assigment to pointer.");
  } 
      
}

//---------------------------------------------------------------------------

void og::type_checker::do_evaluation_node(og::evaluation_node *const node, int lvl) {
  node->argument()->accept(this, lvl + 2);
}

void og::type_checker::do_print_node(og::print_node *const node, int lvl) {
   node->arguments()->accept(this, lvl + 2);
   for(size_t i = 0; i < node->arguments()->size(); i++){
      cdk::expression_node* n = dynamic_cast<cdk::expression_node*>(node->arguments()->node(i));
      if( n->is_typed(cdk::TYPE_UNSPEC))
          n->type(make_primitive_type(4,cdk::TYPE_INT));
      else if(n->is_typed(cdk::TYPE_POINTER))
          throw std::string("Invalid write argument type (pointer)"); 
   }
  
}

//---------------------------------------------------------------------------

void og::type_checker::do_read_node(og::read_node *const node, int lvl) {
  try {
    ASSERT_UNSPEC;
    node->type(make_primitive_type(0, cdk::TYPE_UNSPEC));
  } catch (const std::string &id) {
    throw "undeclared variable '" + id + "'";
  }
}

//---------------------------------------------------------------------------

void og::type_checker::do_for_node(og::for_node *const node, int lvl) {
  if (node->inits()) node->inits()->accept(this, lvl + 4);
  if (node->conditions()) node->conditions()->accept(this, lvl + 4);
  if (node->incrs()) node->incrs()->accept(this, lvl + 4);
  if(node->block()) node->block()->accept(this, lvl + 4);

}

//---------------------------------------------------------------------------

void og::type_checker::do_if_node(og::if_node *const node, int lvl) {
  node->condition()->accept(this, lvl + 4);
  node->block()->accept(this, lvl + 4);
}

void og::type_checker::do_if_else_node(og::if_else_node *const node, int lvl) {
  node->condition()->accept(this, lvl + 4);
  node->thenblock()->accept(this, lvl + 4);
  node->elseblock()->accept(this, lvl + 4);
}


void og::type_checker::do_break_node(og::break_node *const node, int lvl) {
  // EMPTY
}
void og::type_checker::do_continue_node(og::continue_node *const node, int lvl) {
  // EMPTY
}
void og::type_checker::do_return_node(og::return_node *const node, int lvl) {

  std::shared_ptr<og::symbol> function = _symtab.find(_function->name());
  
  if (node->retval()) {
    if (function->is_typed(cdk::TYPE_VOID)) throw std::string("return specified for procedure.");
    
    node->retval()->accept(this, lvl + 2);

    if (function->is_typed(cdk::TYPE_INT)) {
        if(node->retval()->is_typed(cdk::TYPE_UNSPEC))
          node->retval()->type(make_primitive_type(4,cdk::TYPE_INT));
        if (!node->retval()->is_typed(cdk::TYPE_INT))
            throw std::string("wrong type for return. Integer expected.");
    }
    else if (function->is_typed(cdk::TYPE_DOUBLE)) {
      if(node->retval()->is_typed(cdk::TYPE_UNSPEC))
          node->retval()->type(make_primitive_type(8,cdk::TYPE_DOUBLE));
        if (!(node->retval()->is_typed(cdk::TYPE_INT) || \
        node->retval()->is_typed(cdk::TYPE_INT)))
            throw std::string("wrong type for return. Integer or double expected.");
    }
    else if (function->is_typed(cdk::TYPE_STRING)) {
            if (!node->retval()->is_typed(cdk::TYPE_STRING))
                throw std::string("wrong type for return. String expected.");
    }
    else if (function->is_typed(cdk::TYPE_POINTER)) {
        int ft = 0, rt = 0;
        cdk::reference_type *funcType = new cdk::reference_type(4,function->type());
        for(; funcType->name() == cdk::TYPE_POINTER; ft++, new cdk::reference_type(4,funcType->_referenced));
        cdk::reference_type *retType = new cdk::reference_type(4,node->retval()->type());
        for(; retType->name() == cdk::TYPE_POINTER; rt++, new cdk::reference_type(4,retType->_referenced));


        bool compatible = (ft == rt) && (retType == 0 || (retType != 0 && funcType->name() != retType->name()));
        if (!compatible) throw std::string("wrong type for return. Pointer expected");

    } else {
        throw std::string("unknown type for return.");
     }
  }
}

//---------------------------------------------------------------------------

void og::type_checker::do_block_node(og::block_node *const node, int lvl) {
  //EMPTY
}

void og::type_checker::do_function_call_node(og::function_call_node *const node, int lvl) {
  ASSERT_UNSPEC;
  const std::string &id = node->identifier();
  std::shared_ptr<og::symbol> symbol = _symtab.find(id);

  if (symbol == nullptr) throw std::string("symbol '" + id + "' is undeclared.");

  if (!symbol->isFunction()) throw std::string("symbol '" + id + "' is not a function.");

  node->type(symbol->type());

  if ( node->arguments()) {
    node->arguments()->accept(this,lvl + 4);
  
    if(symbol->arguments().size() != node->arguments()->size()){
      throw std::string("Invalid number of function arguments");
    }

    for(size_t i = 0; i < node->arguments()->size(); i++){
      cdk::expression_node* n = dynamic_cast<cdk::expression_node*>(node->arguments()->node(i));
      if(n->is_typed(cdk::TYPE_UNSPEC)){
        if(symbol->arguments().at(i)->name() == cdk::TYPE_INT || symbol->arguments().at(i)->name() == cdk::TYPE_DOUBLE) n->type(symbol->arguments().at(i));
        else throw std::string("invalid argument type in function call");
      }
      if(n->type() != symbol->arguments().at(i))
        throw std::string("invalid argument type in function call");
    } 
  }
}

void og::type_checker::do_function_declaration_node(og::function_declaration_node *const node, int lvl) {
  std::string id;

  // "fix" naming issues...
  if (node->identifier() == "og")
    id = "_main";
  else if (node->identifier() == "_main")
    id = "._main";
  else
    id = node->identifier();

  std::shared_ptr<og::symbol> function = std::make_shared<og::symbol>\
  (node->type(),id,false, false, true,node->qualifier(), true);

  std::shared_ptr<og::symbol> previous = _symtab.find(function->name());
  if (previous) {
  
    if (function->qualifier() != previous->qualifier()) {
        throw std::string("different qualifier in function '" + function->name() + "' redeclaration." );
    }
    if (function->type()->name() != previous->type()->name()) {
        throw std::string("different return type in function '" + function->name() + "' redeclaration." );
    }
    if (function->type()->name() == cdk::TYPE_POINTER){
        checkPointersTypes(cdk::reference_type_cast(previous->type()),cdk::reference_type_cast(function->type()));
    }
    checkArgs(previous,function);
  }
  else {
    _symtab.insert(function->name(), function);
    _parent->set_new_symbol(function);
  }
}
void og::type_checker::do_function_definition_node(og::function_definition_node *const node, int lvl) {
  std::string id;

  // "fix" naming issues...
  if (node->identifier() == "og")
    id = "_main";
  else if (node->identifier() == "_main")
    id = "._main";
  else
    id = node->identifier();

  std::shared_ptr<og::symbol> function = std::make_shared<og::symbol>\
  (node->type(),id,false, false, true,node->qualifier());



  std::shared_ptr<og::symbol> previous = _symtab.find(function->name());
  if (previous) {
    if(previous->forward()){
      if (function->qualifier() != previous->qualifier()) {
          throw std::string("different qualifier in function '" + function->name() + "' redeclaration." );
      }
     
      if (function->type()->name() != previous->type()->name()) {
          throw std::string("different return type in function '" + function->name() + "' redeclaration." );
      }
      
      if (function->type()->name() == cdk::TYPE_POINTER){
          checkPointersTypes(cdk::reference_type_cast(previous->type()),cdk::reference_type_cast(function->type()));
      }
      checkArgs(previous,function);
      _symtab.replace(function->name(), function);
      _parent->set_new_symbol(function);
    } else throw std::string("conflicting definition for '" + function->name() + "'");
  }
  else {
    _symtab.insert(function->name(), function);
    _parent->set_new_symbol(function);
  }
  

}

//---------------------------------------------------------------------------

void og::type_checker::do_left_index_node(og::left_index_node *const node, int lvl) {
  ASSERT_UNSPEC;
  std::shared_ptr<og::symbol> function = _symtab.find(_function->name());
  if (node->base()) {
    node->base()->accept(this, lvl + 2);
    if (!node->base()->is_typed(cdk::TYPE_POINTER)) throw std::string("pointer expression expected in left-index value.");
    }
    else  {
        if(!function->is_typed(cdk::TYPE_POINTER))
            throw std::string("return pointer expression expected in left-value index.");
  }

  node->index()->accept(this, lvl + 2);
  if(!node->index()->is_typed(cdk::TYPE_INT)) throw std::string("integer expression expected in left-value index");
  node->type(std::shared_ptr<cdk::basic_type>(new cdk::primitive_type(8,cdk::TYPE_DOUBLE)));
}
void og::type_checker::do_variable_declaration_node(og::variable_declaration_node *const node, int lvl) { 
  if (node->initializer() != nullptr) {

    node->initializer()->accept(this, lvl + 2);

    if (node->is_typed(cdk::TYPE_INT)) {
        if (node->initializer()->is_typed(cdk::TYPE_UNSPEC)) { //INPUT
            node->initializer()->type(make_primitive_type(4,cdk::TYPE_INT));
        }
        if (!node->initializer()->is_typed(cdk::TYPE_INT)) {
            throw std::string("wrong type for initializer(integer expected).");
        }
    }
    else if (node->is_typed(cdk::TYPE_DOUBLE)) {
        if (node->initializer()->is_typed(cdk::TYPE_UNSPEC)) { //INPUT
            node->initializer()->type(make_primitive_type(8,cdk::TYPE_DOUBLE));
        }

        if (!node->initializer()->is_typed(cdk::TYPE_DOUBLE) && !node->initializer()->is_typed(cdk::TYPE_INT)) {
            throw std::string("wrong type for initializer(integer or double expected).");
        }
    }
    else if (node->is_typed(cdk::TYPE_STRING)) {

        if (!node->initializer()->is_typed(cdk::TYPE_STRING)) {
            throw std::string("wrong type for initializer(string expected).");
        }
    }
    else if (node->is_typed(cdk::TYPE_POINTER)) {
        if (!node->initializer()->is_typed(cdk::TYPE_POINTER)) {
            throw std::string("wrong type for initializer(pointer expected).");
        }
        checkPointersTypes(cdk::reference_type_cast(node->type()),cdk::reference_type_cast(node->initializer()->type()));

    } else if (node->is_typed(cdk::TYPE_UNSPEC)) {
        if ( node->identifiers().size() != (dynamic_cast<og::tuple_node *>(node->initializer()))->arguments()->size()) {
                throw std::string("number of identifiers does not match number of initializers.");
            }
    }
    else {
        throw std::string("unknown type for initializer.");
    }
  }
  
  if (node->is_typed(cdk::TYPE_UNSPEC)) { //tuple
  
    for (int j = 0; j < (signed) node->identifiers().size(); j++ ) {

        const std::string id = node->identifiers().at(j);

        std::shared_ptr<og::symbol> symbol = std::make_shared<og::symbol>(
        (dynamic_cast<cdk::typed_node *>((dynamic_cast<og::tuple_node *>(node->initializer()))->arguments()->node(j)))->type(),
        id, false,
        (bool)node->initializer(), false,node->qualifier(), false);

        if(_symtab.insert(id, symbol)) {
         _parent->set_new_symbol(symbol);
        } else {
         throw std::string("variable '" + id + "' redeclared.");
        }
     }
   }
  else {
    
       const std::string id = node->identifiers().at(0); //ONLY 1

       std::shared_ptr<og::symbol> symbol = std::make_shared<og::symbol>(
       node->type(),id, false,
       (bool)node->initializer(), false,node->qualifier(), false);
       if(_symtab.insert(id, symbol)) {
         _parent->set_new_symbol(symbol);
       } else {
         throw std::string("variable '" + id + "' redeclared.");
       }
    }
}

void og::type_checker::do_address_node(og::address_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->lvalue()->accept(this, lvl + 2);
  if (node->lvalue()->is_typed(cdk::TYPE_DOUBLE)){
    node->type(make_primitive_type(4,cdk::TYPE_POINTER));
  }
  else {
    throw std::string("wrong type in unary logical expression");
  }
}

void og::type_checker::do_sizeof_node(og::sizeof_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->argument()->accept(this, lvl + 2);
}


void og::type_checker::do_nullptr_node(og::nullptr_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(cdk::make_primitive_type(4, cdk::TYPE_POINTER));
}
void og::type_checker::do_stack_alloc_node(og::stack_alloc_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->argument()->accept(this, lvl +2);
  if (!node->argument()->is_typed(cdk::TYPE_INT))
    throw std::string("integer expression expected for memory allocation.");

  auto myType = cdk::make_primitive_type(4,cdk::TYPE_POINTER);
  //TODO:missing something?
  node->type(std::shared_ptr<cdk::basic_type>(myType));
}


void og::type_checker::do_tuple_index_node(og::tuple_index_node *const node, int lvl) {

}

void og::type_checker::do_tuple_node(og::tuple_node *const node, int lvl) {
  node->arguments()->accept(this, lvl + 2);
  if(node->arguments()->size() == 1){
    cdk::expression_node* n = dynamic_cast<cdk::expression_node*>(node->arguments()->node(0));

    node->type(n->type());
  } else{
    std::vector<std::shared_ptr<cdk::basic_type>> types;
    for(size_t i = 0; i < node->arguments()->size(); i++){
      cdk::expression_node* n = dynamic_cast<cdk::expression_node*>(node->arguments()->node(i));
      types.push_back(n->type());
    }
    node->type(cdk::make_structured_type(types));
  };
  
}

void og::type_checker::do_identity_node(og::identity_node *const node, int lvl) {
  ASSERT_UNSPEC;

  node->argument()->accept(this, lvl + 2);

  if (node->argument()->is_typed(cdk::TYPE_INT)) {
    node->type(make_primitive_type(4,cdk::TYPE_INT));
  }
  else if (node->argument()->is_typed(cdk::TYPE_DOUBLE)) {
    node->type(make_primitive_type(8, cdk::TYPE_DOUBLE));
  }
  else {
    throw std::string("Integer or double expression expected.");
  }
}

//-----------------------------------------------------------------------
//------------------------------AUXILIARY METHODS------------------------

void og::type_checker::checkPointersTypes(std::shared_ptr<cdk::reference_type> rPointer, std::shared_ptr<cdk::reference_type> lPointer) {
    int rLvl = 1;
    int lLvl = 1;

    auto rRef = rPointer->referenced();
    auto lRef = lPointer->referenced();
    
    while(true){
      if(rRef->name() != cdk::TYPE_POINTER) break;
      rLvl++;
      rRef = cdk::reference_type_cast(rRef)->referenced();
    }

    while(true){
      if(lRef->name() != cdk::TYPE_POINTER) break;
      lLvl++;
      lRef = cdk::reference_type_cast(lRef)->referenced();
    }
    if (lRef->name() == cdk::TYPE_UNSPEC);
    else if(lLvl != rLvl) throw std::string("Non matching pointer levels");
    else if(rRef->name() != lRef->name()) throw std::string("Non matching pointer types");

}

void og::type_checker::checkArgs(std::shared_ptr<og::symbol> previous,std::shared_ptr<og::symbol> function)
{
    if (previous->arguments().size() == function->arguments().size()){
        for (size_t i = 0; i < function->arguments().size(); i++) {
            if (previous->arguments().at(i)->name() != function->arguments().at(i)->name() ) {
                throw std::string("arguments in function '" + function->name() + "' do not matching previous ones.");
            }
            else if ( previous->arguments().at(i)->name() == cdk::TYPE_POINTER && function->arguments().at(i)->name() == cdk::TYPE_POINTER) {
                checkPointersTypes(cdk::reference_type_cast(previous->arguments().at(i)),cdk::reference_type_cast(function->arguments().at(i)));
            }
        }
    }
    else {
        throw std::string("different number of arguments in function'" + function->name() + "' declaration.");
    }
}


